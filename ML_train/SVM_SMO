import numpy as np
class SVM:
    def __init__(self,x_data,y_data,epsilon = 0.001,c = None,algo = 'smo'):
        self._x_data = x_data
        self._y_data = y_data
        #拉格朗日乘子
        self._a = np.array([1.]*len(self._x_data))
        print(len(self._a))
        #代求w,b
        self._b = 0.0
        self._w = None
        #Kij = X^T xj 方阵
        self._K = self._cal_kernel()
        #Ei = f(xi) - yi  list方便比较
        self._E = self._cal_E()
        #精度误差
        self._epsilon = epsilon
        #soft morgin SVM参数，若C
        self._c = c
        #smo实现算法
        self._algo = algo
    #对外接口
    def train(self):
        self._smo0()


    #对外接口，获取训练后的模型参数
    def model(self):
        self._w = np.matmul((self._a*self._y_data).reshape(1,len(self._a)),self._x_data)
        return self._w,self._b

    def _smo0(self):
        counter =100
        while 1:
            a1_id,a2_id = self._choose_a()
            self._updata(a1_id,a2_id)
            if self._satisfy() or counter == 0:
                break
            counter -= 1
    #选择a1,a2
    def _choose_a(self):
        a1_id,a2_id = None,None
        #挑选support vector
        on_bound_id = []
        #不是support vector
        remain_id = []
        #筛选过程
        for i in range(len(self._a)):
            if self._a[i] > 0 and (self._c is None or self._a[i] < self._c):
                on_bound_id.append(i)
            else:
                remain_id.append(i)
        for i in on_bound_id:
            #找不满足KKT条件的伪support vector，作为a1 应该>=1吧
            if not(1-self._epsilon <= self._y_data[i] * self._g(i) <= 1 + self._epsilon):
                #基于上述的a1,寻找a2
                a2_id = self._choose_a2(i,on_bound_id,remain_id)
                if a2_id is not None:
                    a1_id = i
                    return a1_id,a2_id
        #如果所有的support vector 都找遍了，就只能找其他的数据点作为a1
        for i in remain_id:
            if self._a[i] == 0:
                if not (1 - self._epsilon <= self._y_data[i] * self._g(i) <= 1 + self._epsilon):
                    # 基于上述的a1,寻找a2
                    a2_id = self._choose_a2(i, on_bound_id, remain_id)
                    if a2_id is not None:
                        a1_id = i
                        return a1_id, a2_id

        return a1_id,a2_id

    def _choose_a2(self,a1_id,on_bound_id,remain_id):
        a2_id = None
        E1 = self._E[a1_id]
        #检查E1,E2是否有足够的更新
        if E1 > 0:
            tmp = np.argmin(self._E)
        elif E1 <= 0:
            tmp = np.argmax(self._E)
        if tmp != a1_id and self._check_enough_diff(a1_id,tmp):
            a2_id = tmp
            return a2_id
        else:
            #第二步：若第一步没有足够更新，则找伪“support vector”即ai != 0的点
            for id in on_bound_id:
                if id != a1_id and self._check_enough_diff(a1_id,id):
                    a2_id = id
                    return a2_id
            for i in remain_id:
                if id != a1_id and self._check_enough_diff(a1_id,id):
                    a2_id = id
                    return a2_id

        return a2_id

    #检查是否满足KKT条件
    def _satisfy(self):
        #check sum of a times y
        #拉格朗日函数对b求偏导得到的式子=0
        if not (-self._epsilon <= np.dot(self._a,self._y_data) <= self._epsilon):
            return  False
        if self._c is not None:
            #soft margin
            #check range of a
            for a in self._a:
                if not (0<= a <= self._c+self._epsilon):
                    return False
        else:
            for i in range(len(self._y_data)):
                #dual feasbility
                if self._a[i] < 0:
                    return False
                #complementary slackness
                elif self._a[i] > 0 and not (1-self._epsilon <= self._y_data[i]*self._g(i) <= 1+self._epsilon ):
                    return False

                elif self._a[i] == 0 and self._y_data[i]*self._g(i) <= 1-self._epsilon:
                    return False
        return True

    #check y times g

    def _updata(self,id1,id2):
        #update a2:
        k11 = self._K[id1][id1]
        k22 = self._K[id2][id2]
        k12 = self._K[id1][id2]

        a2_old = self._a[id2]
        a1_old = self._a[id1]
        y2 = self._y_data[id2]
        y1 = self._y_data[id1]
        E1_old = self._E[id1]
        E2_old = self._E[id2]
        b_old = self._b

        eta = k11 + k22 + k12
        a2_new_unc = a2_old + y2*(E1_old - E2_old) / eta
        #和可行域比较
        a2_new = self.clip_a2(a2_new_unc,id1,id2)
        #update a1
        a1 = a1_old + y1*y2*(a2_old - a2_new)

        #update b
        # b1_new = y1_new - (a1_new*y1*k11 + a2_new*y2*k21 + ai*yi*ki1(i = 3 ->N求和 常量))
        # b1_old = y1_old - (a1_old*y1*k11 + a2_old*y2*k21 + ai*yi*ki1(i = 3 ->N求和 常量))
        # 作差 : b1_new = b1_old + (y1_new - y1_old) - y1*k11*(a1_new - a1_old) - y2*k21*(a2_new - a2_old)
        # b1_new = b1_old + Ei - yi*(ai_new - ai_old)*kii - yj*(aj_new - aj_old)*kij
        # b2_new = b2_old + Ej - yi*(ai_new - ai_old)*kij - yj*(aj_new - aj_old)*kjj

        b1_new = -E1_old - y1*k11*(a1-a1_old) - y2*k12*(a2_new-a2_old) + b_old
        b2_new = -E2_old - y1*k12*(a1-a1_old) - y2*k22*(a2_new-a2_old) + b_old
        self._b = (b1_new + b2_new)/2
        self._a[id1] ,self._a[id2] = a1,a2_new

        #update E
        self._update_E()

    #检查a2_new和a2_old之间的差距/需要计算a2_new
    def _check_enough_diff(self,id1,id2):
        k11 = self._K[id1][id1]
        k22 = self._K[id2][id2]
        k12 = self._K[id1][id2]

        a2_old = self._a[id2]
        y2 = self._y_data[id2]
        E1_old = self._E[id1]
        E2_old = self._E[id2]

        eta = k11 + k22 -2*k12

        a2_new_unc = a2_old + y2*(E1_old-E2_old)/eta
        a2_new = self.clip_a2(a2_new_unc,id1,id2)

        #检查更新量是否达到一定的值，这里直接选取epsilon
        #记住一定要有abs（啊啊啊啊调了一天bug，当时写的时候还觉得为啥一定是正值,都不用加绝对值，竟然被自己坑了）
        if abs(a2_new - a2_old) > self._epsilon:
            return True
        else:
            return False


    #和可行域比较
    def clip_a2(self,a2,id1,id2):
        L,H = None,None
        if self._y_data[id1] == self._y_data[id2]:
            if self._c is not None:
                L = max(0,self._a[id2]+self._a[id1] - self._c)
                H = min(self._c,self._a[id2] + self._a[id1])
            else:
                L = 0
                H = self._a[id2] + self._a[id1]
        else:
            L = max(0,self._a[id2] - self._a[id1])
            if self._c is not None:
                H = min(self._c,self._c + self._a[id2] - self._a[id1])
        if a2 < L:
            cliped_a2 = L
        else:
            if H is None:
                cliped_a2 = a2
            elif a2 <= H:
                cliped_a2 = a2
            else:
                cliped_a2 = H
        return cliped_a2
    #g(x)对应的f(x)
    def _g(self,index):
        return np.sum(self._a*self._y_data*self._K[index])+self._b
    #计算方阵K
    def _cal_kernel(self):
        print(np.matmul(self._x_data,self._x_data.transpose()))
        return np.matmul(self._x_data,self._x_data.transpose())
    #计算看列表
    def _cal_E(self):
        tmp = []
        for i in range(len(self._y_data)):
            tmp.append(self._g(i) - self._y_data[i])
        return np.array(tmp)
    #更新列表E
    def _update_E(self):
        self._E = self._cal_E()
if __name__ == '__main__':
    #该样例结果w = [1,0](x1的系数为1，x2的系数为0)，b = 0（无平移量）
    X = np.array([[-3,1.],[-2,1.],[-1,1.],[1,1.],[2,-1.],[3,-1.]])
    y = np.array([-1,-1,-1,1,1,1])
    svm_model = SVM(X,y)
    svm_model.train()
    w,b = svm_model.model()
    print("w=",w,"b=",b)
